/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rsyncdatamovement.proto */

#ifndef PROTOBUF_C_rsyncdatamovement_2eproto__INCLUDED
#define PROTOBUF_C_rsyncdatamovement_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Datamovement__RsyncDataMovementCreateRequest Datamovement__RsyncDataMovementCreateRequest;
typedef struct _Datamovement__RsyncDataMovementCreateResponse Datamovement__RsyncDataMovementCreateResponse;
typedef struct _Datamovement__RsyncDataMovementStatusRequest Datamovement__RsyncDataMovementStatusRequest;
typedef struct _Datamovement__RsyncDataMovementStatusResponse Datamovement__RsyncDataMovementStatusResponse;
typedef struct _Datamovement__RsyncDataMovementDeleteRequest Datamovement__RsyncDataMovementDeleteRequest;
typedef struct _Datamovement__RsyncDataMovementDeleteResponse Datamovement__RsyncDataMovementDeleteResponse;


/* --- enums --- */

typedef enum _Datamovement__RsyncDataMovementStatusResponse__State {
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__PENDING = 0,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__STARTING = 1,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__RUNNING = 2,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__COMPLETED = 3,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__UNKNOWN_STATE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE)
} Datamovement__RsyncDataMovementStatusResponse__State;
typedef enum _Datamovement__RsyncDataMovementStatusResponse__Status {
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__INVALID = 0,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__NOT_FOUND = 1,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__SUCCESS = 2,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__FAILED = 3,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__UNKNOWN_STATUS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS)
} Datamovement__RsyncDataMovementStatusResponse__Status;
typedef enum _Datamovement__RsyncDataMovementDeleteResponse__Status {
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__INVALID = 0,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__NOT_FOUND = 1,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__DELETED = 2,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__ACTIVE = 3,
  DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__UNKNOWN = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS)
} Datamovement__RsyncDataMovementDeleteResponse__Status;

/* --- messages --- */

/*
 * The data movemement create request message containing the source and destination files or directories. The
 * NNF Data Mover will perform a copy from source to the destination. Specify dryrun to instantiate
 * a new data movement request where the copy is simulated and not executed
 */
struct  _Datamovement__RsyncDataMovementCreateRequest
{
  ProtobufCMessage base;
  char *initiator;
  char *target;
  char *workflow;
  char *namespace_;
  char *source;
  char *destination;
  protobuf_c_boolean dryrun;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_CREATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_create_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * The data movement create response message contains a unique identifier amont all data movement requests for
 * the lifetime of the active job. The UID can be used to query for status of the request using the
 * data movememnt status request message.
 */
struct  _Datamovement__RsyncDataMovementCreateResponse
{
  ProtobufCMessage base;
  char *uid;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_CREATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_create_response__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * The data movement status request message permits users to query the status of a previously issued
 * data movement request by specifying the request's unique identifier.
 */
struct  _Datamovement__RsyncDataMovementStatusRequest
{
  ProtobufCMessage base;
  char *uid;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_status_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * The data movement status response message defines the current status of a data movement request. The
 * state field describes the current state of the request. The message field contains ancillary information
 * describing the data movement request. 
 */
struct  _Datamovement__RsyncDataMovementStatusResponse
{
  ProtobufCMessage base;
  Datamovement__RsyncDataMovementStatusResponse__State state;
  Datamovement__RsyncDataMovementStatusResponse__Status status;
  char *message;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_status_response__descriptor) \
    , DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATE__PENDING, DATAMOVEMENT__RSYNC_DATA_MOVEMENT_STATUS_RESPONSE__STATUS__INVALID, (char *)protobuf_c_empty_string }


/*
 * The data movement delete request permits users to delete a completed data movement request (any request with a 
 * status of COMPLETED) by specifying the request's unique identifier.
 */
struct  _Datamovement__RsyncDataMovementDeleteRequest
{
  ProtobufCMessage base;
  char *uid;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_delete_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * The data movement delete response returns the status of the delete operation.
 */
struct  _Datamovement__RsyncDataMovementDeleteResponse
{
  ProtobufCMessage base;
  Datamovement__RsyncDataMovementDeleteResponse__Status status;
};
#define DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&datamovement__rsync_data_movement_delete_response__descriptor) \
    , DATAMOVEMENT__RSYNC_DATA_MOVEMENT_DELETE_RESPONSE__STATUS__INVALID }


/* Datamovement__RsyncDataMovementCreateRequest methods */
void   datamovement__rsync_data_movement_create_request__init
                     (Datamovement__RsyncDataMovementCreateRequest         *message);
size_t datamovement__rsync_data_movement_create_request__get_packed_size
                     (const Datamovement__RsyncDataMovementCreateRequest   *message);
size_t datamovement__rsync_data_movement_create_request__pack
                     (const Datamovement__RsyncDataMovementCreateRequest   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_create_request__pack_to_buffer
                     (const Datamovement__RsyncDataMovementCreateRequest   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementCreateRequest *
       datamovement__rsync_data_movement_create_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_create_request__free_unpacked
                     (Datamovement__RsyncDataMovementCreateRequest *message,
                      ProtobufCAllocator *allocator);
/* Datamovement__RsyncDataMovementCreateResponse methods */
void   datamovement__rsync_data_movement_create_response__init
                     (Datamovement__RsyncDataMovementCreateResponse         *message);
size_t datamovement__rsync_data_movement_create_response__get_packed_size
                     (const Datamovement__RsyncDataMovementCreateResponse   *message);
size_t datamovement__rsync_data_movement_create_response__pack
                     (const Datamovement__RsyncDataMovementCreateResponse   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_create_response__pack_to_buffer
                     (const Datamovement__RsyncDataMovementCreateResponse   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementCreateResponse *
       datamovement__rsync_data_movement_create_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_create_response__free_unpacked
                     (Datamovement__RsyncDataMovementCreateResponse *message,
                      ProtobufCAllocator *allocator);
/* Datamovement__RsyncDataMovementStatusRequest methods */
void   datamovement__rsync_data_movement_status_request__init
                     (Datamovement__RsyncDataMovementStatusRequest         *message);
size_t datamovement__rsync_data_movement_status_request__get_packed_size
                     (const Datamovement__RsyncDataMovementStatusRequest   *message);
size_t datamovement__rsync_data_movement_status_request__pack
                     (const Datamovement__RsyncDataMovementStatusRequest   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_status_request__pack_to_buffer
                     (const Datamovement__RsyncDataMovementStatusRequest   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementStatusRequest *
       datamovement__rsync_data_movement_status_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_status_request__free_unpacked
                     (Datamovement__RsyncDataMovementStatusRequest *message,
                      ProtobufCAllocator *allocator);
/* Datamovement__RsyncDataMovementStatusResponse methods */
void   datamovement__rsync_data_movement_status_response__init
                     (Datamovement__RsyncDataMovementStatusResponse         *message);
size_t datamovement__rsync_data_movement_status_response__get_packed_size
                     (const Datamovement__RsyncDataMovementStatusResponse   *message);
size_t datamovement__rsync_data_movement_status_response__pack
                     (const Datamovement__RsyncDataMovementStatusResponse   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_status_response__pack_to_buffer
                     (const Datamovement__RsyncDataMovementStatusResponse   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementStatusResponse *
       datamovement__rsync_data_movement_status_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_status_response__free_unpacked
                     (Datamovement__RsyncDataMovementStatusResponse *message,
                      ProtobufCAllocator *allocator);
/* Datamovement__RsyncDataMovementDeleteRequest methods */
void   datamovement__rsync_data_movement_delete_request__init
                     (Datamovement__RsyncDataMovementDeleteRequest         *message);
size_t datamovement__rsync_data_movement_delete_request__get_packed_size
                     (const Datamovement__RsyncDataMovementDeleteRequest   *message);
size_t datamovement__rsync_data_movement_delete_request__pack
                     (const Datamovement__RsyncDataMovementDeleteRequest   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_delete_request__pack_to_buffer
                     (const Datamovement__RsyncDataMovementDeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementDeleteRequest *
       datamovement__rsync_data_movement_delete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_delete_request__free_unpacked
                     (Datamovement__RsyncDataMovementDeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* Datamovement__RsyncDataMovementDeleteResponse methods */
void   datamovement__rsync_data_movement_delete_response__init
                     (Datamovement__RsyncDataMovementDeleteResponse         *message);
size_t datamovement__rsync_data_movement_delete_response__get_packed_size
                     (const Datamovement__RsyncDataMovementDeleteResponse   *message);
size_t datamovement__rsync_data_movement_delete_response__pack
                     (const Datamovement__RsyncDataMovementDeleteResponse   *message,
                      uint8_t             *out);
size_t datamovement__rsync_data_movement_delete_response__pack_to_buffer
                     (const Datamovement__RsyncDataMovementDeleteResponse   *message,
                      ProtobufCBuffer     *buffer);
Datamovement__RsyncDataMovementDeleteResponse *
       datamovement__rsync_data_movement_delete_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   datamovement__rsync_data_movement_delete_response__free_unpacked
                     (Datamovement__RsyncDataMovementDeleteResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Datamovement__RsyncDataMovementCreateRequest_Closure)
                 (const Datamovement__RsyncDataMovementCreateRequest *message,
                  void *closure_data);
typedef void (*Datamovement__RsyncDataMovementCreateResponse_Closure)
                 (const Datamovement__RsyncDataMovementCreateResponse *message,
                  void *closure_data);
typedef void (*Datamovement__RsyncDataMovementStatusRequest_Closure)
                 (const Datamovement__RsyncDataMovementStatusRequest *message,
                  void *closure_data);
typedef void (*Datamovement__RsyncDataMovementStatusResponse_Closure)
                 (const Datamovement__RsyncDataMovementStatusResponse *message,
                  void *closure_data);
typedef void (*Datamovement__RsyncDataMovementDeleteRequest_Closure)
                 (const Datamovement__RsyncDataMovementDeleteRequest *message,
                  void *closure_data);
typedef void (*Datamovement__RsyncDataMovementDeleteResponse_Closure)
                 (const Datamovement__RsyncDataMovementDeleteResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Datamovement__RsyncDataMover_Service Datamovement__RsyncDataMover_Service;
struct _Datamovement__RsyncDataMover_Service
{
  ProtobufCService base;
  void (*create)(Datamovement__RsyncDataMover_Service *service,
                 const Datamovement__RsyncDataMovementCreateRequest *input,
                 Datamovement__RsyncDataMovementCreateResponse_Closure closure,
                 void *closure_data);
  void (*status)(Datamovement__RsyncDataMover_Service *service,
                 const Datamovement__RsyncDataMovementStatusRequest *input,
                 Datamovement__RsyncDataMovementStatusResponse_Closure closure,
                 void *closure_data);
  void (*delete)(Datamovement__RsyncDataMover_Service *service,
                 const Datamovement__RsyncDataMovementDeleteRequest *input,
                 Datamovement__RsyncDataMovementDeleteResponse_Closure closure,
                 void *closure_data);
};
typedef void (*Datamovement__RsyncDataMover_ServiceDestroy)(Datamovement__RsyncDataMover_Service *);
void datamovement__rsync_data_mover__init (Datamovement__RsyncDataMover_Service *service,
                                           Datamovement__RsyncDataMover_ServiceDestroy destroy);
#define DATAMOVEMENT__RSYNC_DATA_MOVER__BASE_INIT \
    { &datamovement__rsync_data_mover__descriptor, protobuf_c_service_invoke_internal, NULL }
#define DATAMOVEMENT__RSYNC_DATA_MOVER__INIT(function_prefix__) \
    { DATAMOVEMENT__RSYNC_DATA_MOVER__BASE_INIT,\
      function_prefix__ ## create,\
      function_prefix__ ## status,\
      function_prefix__ ## delete  }
void datamovement__rsync_data_mover__create(ProtobufCService *service,
                                            const Datamovement__RsyncDataMovementCreateRequest *input,
                                            Datamovement__RsyncDataMovementCreateResponse_Closure closure,
                                            void *closure_data);
void datamovement__rsync_data_mover__status(ProtobufCService *service,
                                            const Datamovement__RsyncDataMovementStatusRequest *input,
                                            Datamovement__RsyncDataMovementStatusResponse_Closure closure,
                                            void *closure_data);
void datamovement__rsync_data_mover__delete(ProtobufCService *service,
                                            const Datamovement__RsyncDataMovementDeleteRequest *input,
                                            Datamovement__RsyncDataMovementDeleteResponse_Closure closure,
                                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_create_request__descriptor;
extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_create_response__descriptor;
extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_status_request__descriptor;
extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_status_response__descriptor;
extern const ProtobufCEnumDescriptor    datamovement__rsync_data_movement_status_response__state__descriptor;
extern const ProtobufCEnumDescriptor    datamovement__rsync_data_movement_status_response__status__descriptor;
extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_delete_request__descriptor;
extern const ProtobufCMessageDescriptor datamovement__rsync_data_movement_delete_response__descriptor;
extern const ProtobufCEnumDescriptor    datamovement__rsync_data_movement_delete_response__status__descriptor;
extern const ProtobufCServiceDescriptor datamovement__rsync_data_mover__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rsyncdatamovement_2eproto__INCLUDED */
