// Copyright 2022 Hewlett Packard Enterprise Development LP
// Other additional copyright holders may be indicated within.
//
// The entirety of this work is licensed under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
//
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "nnf.cray.hpe.com/datamovement/api";
option java_multiple_files = true;
option java_package = "com.hpe.cray.nnf.datamovement";
option java_outer_classname = "DataMovementProto";

package datamovement;

// DataMover service definition describes the API for perform data movement
// for NNF storage. 
service DataMover {
    // Create sends a new data movement request identified by source and destination fields. It returns
    // a response containing a unique identifier which can be used to query the status of the request.
    rpc Create (DataMovementCreateRequest) returns (DataMovementCreateResponse) {}

    // Status requests the status of a previously submitted data movement request. It accepts a unique
    // identifier that identifies the request and returns a status message.
    rpc Status (DataMovementStatusRequest) returns (DataMovementStatusResponse) {}

    // Delete will attempt to delete a completed data movement request. It accepts a unique identifier
    // that identifies the request and returns the status of the delete operation.
    rpc Delete (DataMovementDeleteRequest) returns (DataMovementDeleteResponse) {}

    // List returns all current data movement requests for a given namespace and workflow.
    rpc List (DataMovementListRequest) returns (DataMovementListResponse) {}

    // Cancel will attempt to stop a data movement request. It accepts a unique identifier
    // that identifies the request and returns the status of the cancel operation.
    rpc Cancel (DataMovementCancelRequest) returns (DataMovementCancelResponse) {}
}

// Data Movement workflow message contains identifying information for the workflow initiating the data movement
// operation. This message must be nested in all Request messages.
message DataMovementWorkflow {
    string name = 1;
    string namespace = 2;
}

// Data Movement workflows contain a CommandStatus object in the Status object. This information
// relays the current state of the data movement progress. It includes the command, the progress
// percentage (e.g. 0-100%), elapsed time of the data movement (duration string, e.g. 5s), the last
// received message from the data movment command, and the time of that last message.
message DataMovementCommandStatus {
    string command = 1;
    int32 progress = 2;
    string elapsedTime = 3;
    string lastMessage = 4;
    string lastMessageTime = 5;

}

// The data movement create request message containing the source and destination files or directories. The
// NNF Data Mover will perform a copy from source to the destination. Specify dryrun to instantiate
// a new data movement request where the copy is simulated and not executed
message DataMovementCreateRequest {
    DataMovementWorkflow workflow = 1;
    string source = 2;
    string destination = 3;
    bool dryrun = 4;
}

// The data movement create response message contains a unique identifier amont all data movement requests for
// the lifetime of the active job. The UID can be used to query for status of the request using the
// data movement status request message.
message DataMovementCreateResponse {
    string uid = 1;

    enum Status {
        SUCCESS = 0;
        FAILED = 1;
        INVALID = 2;
    }
    Status status = 2;
    string message = 3;
}

// The data movement status request message permits users to query the status of a previously issued
// data movement request by specifying the request's unique identifier.
message DataMovementStatusRequest {
    DataMovementWorkflow workflow = 1;
    string uid = 2;
    int64 maxWaitTime = 3;
}

// The data movement status response message defines the current status of a data movement request. The
// state field describes the current state of the request. The message field contains ancillary information
// describing the data movement request. 
message DataMovementStatusResponse {
    enum State {
        PENDING = 0;
        STARTING = 1;
        RUNNING = 2;
        COMPLETED = 3;
        CANCELLING = 4;
        UNKNOWN_STATE = 5;
    }
    State state = 1;

    enum Status {
        INVALID = 0;
        NOT_FOUND = 1;
        SUCCESS = 2;
        FAILED = 3;
        CANCELLED = 4;
        UNKNOWN_STATUS = 5;
    }
    Status status = 2;
    string message = 3;
    DataMovementCommandStatus commandStatus = 4;
}

// The data movement delete request permits users to delete a completed data movement request (any request with a 
// status of COMPLETED) by specifying the request's unique identifier.
message DataMovementDeleteRequest {
    DataMovementWorkflow workflow = 1;
    string uid = 2;
}

// The data movement delete response returns the status of the delete operation.
message DataMovementDeleteResponse {
    enum Status {
        INVALID = 0;
        NOT_FOUND = 1;
        SUCCESS = 2;
        ACTIVE = 3;
        UNKNOWN = 4;
    }
    Status status = 1;
    string message = 2;
}

// The data movement list request allows a user to get a list of the current
// data movement requests. The user must supply the workflow and namespace
// which will be used to filter the data movement requests for retrieval.
message DataMovementListRequest {
    DataMovementWorkflow workflow = 1;
}

// The data movement list response returns a list of the matching data movement
// requests' uids
message DataMovementListResponse {
    repeated string uids = 1;
}

// The data movement cancel request permits users to iniatiate a cancellation of
// a data movement request that is in progress.
message DataMovementCancelRequest {
    DataMovementWorkflow workflow = 1;
    string uid = 2;
}

// The data movement cancel response returns the status of the cancel request.
// The cancel process will begin upon success. This response does not indicate
// that that cancel process has completed, but rather that it has been
// initiated.
message DataMovementCancelResponse {
    enum Status {
        INVALID = 0;
        NOT_FOUND = 1;
        SUCCESS = 2;
        FAILED = 3;
      }
      Status status = 1;
      string message = 2;
}
