// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datamovement.proto

#include "datamovement.pb.h"
#include "datamovement.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace datamovement {

static const char* DataMover_method_names[] = {
  "/datamovement.DataMover/Create",
  "/datamovement.DataMover/Status",
  "/datamovement.DataMover/Delete",
  "/datamovement.DataMover/List",
};

std::unique_ptr< DataMover::Stub> DataMover::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataMover::Stub> stub(new DataMover::Stub(channel, options));
  return stub;
}

DataMover::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(DataMover_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(DataMover_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(DataMover_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(DataMover_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataMover::Stub::Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::datamovement::DataMovementCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void DataMover::Stub::async::Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void DataMover::Stub::async::Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>* DataMover::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::datamovement::DataMovementCreateResponse, ::datamovement::DataMovementCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>* DataMover::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataMover::Stub::Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::datamovement::DataMovementStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void DataMover::Stub::async::Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void DataMover::Stub::async::Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>* DataMover::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::datamovement::DataMovementStatusResponse, ::datamovement::DataMovementStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>* DataMover::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataMover::Stub::Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::datamovement::DataMovementDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void DataMover::Stub::async::Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DataMover::Stub::async::Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>* DataMover::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::datamovement::DataMovementDeleteResponse, ::datamovement::DataMovementDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>* DataMover::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataMover::Stub::List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::datamovement::DataMovementListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void DataMover::Stub::async::List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void DataMover::Stub::async::List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>* DataMover::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::datamovement::DataMovementListResponse, ::datamovement::DataMovementListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>* DataMover::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataMover::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataMover_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataMover::Service, ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataMover::Service* service,
             ::grpc::ServerContext* ctx,
             const ::datamovement::DataMovementCreateRequest* req,
             ::datamovement::DataMovementCreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataMover_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataMover::Service, ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataMover::Service* service,
             ::grpc::ServerContext* ctx,
             const ::datamovement::DataMovementStatusRequest* req,
             ::datamovement::DataMovementStatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataMover_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataMover::Service, ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataMover::Service* service,
             ::grpc::ServerContext* ctx,
             const ::datamovement::DataMovementDeleteRequest* req,
             ::datamovement::DataMovementDeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataMover_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataMover::Service, ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataMover::Service* service,
             ::grpc::ServerContext* ctx,
             const ::datamovement::DataMovementListRequest* req,
             ::datamovement::DataMovementListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
}

DataMover::Service::~Service() {
}

::grpc::Status DataMover::Service::Create(::grpc::ServerContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataMover::Service::Status(::grpc::ServerContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataMover::Service::Delete(::grpc::ServerContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataMover::Service::List(::grpc::ServerContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace datamovement

