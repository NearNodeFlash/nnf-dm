// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: datamovement.proto
// Original file comments:
// Copyright 2022 Hewlett Packard Enterprise Development LP
// Other additional copyright holders may be indicated within.
//
// The entirety of this work is licensed under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
//
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_datamovement_2eproto__INCLUDED
#define GRPC_datamovement_2eproto__INCLUDED

#include "datamovement.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace datamovement {

// DataMover service definition describes the API for perform data movement
// for NNF storage. 
class DataMover final {
 public:
  static constexpr char const* service_full_name() {
    return "datamovement.DataMover";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create sends a new data movement request identified by source and destination fields. It returns
    // a response containing a unique identifier which can be used to query the status of the request.
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::datamovement::DataMovementCreateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Status requests the status of a previously submitted data movement request. It accepts a unique
    // identifier that identifies the request and returns a status message.
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::datamovement::DataMovementStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    // Delete will attempt to delete a completed data movement request. It accepts a unique identifier
    // that identifies the request and returns the status of the delete operation.
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::datamovement::DataMovementDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // List returns all current data movement requests for a given namespace and workflow.
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::datamovement::DataMovementListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>> AsyncList(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create sends a new data movement request identified by source and destination fields. It returns
      // a response containing a unique identifier which can be used to query the status of the request.
      virtual void Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Status requests the status of a previously submitted data movement request. It accepts a unique
      // identifier that identifies the request and returns a status message.
      virtual void Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete will attempt to delete a completed data movement request. It accepts a unique identifier
      // that identifies the request and returns the status of the delete operation.
      virtual void Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List returns all current data movement requests for a given namespace and workflow.
      virtual void List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementStatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::datamovement::DataMovementListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::datamovement::DataMovementCreateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>> AsyncCreate(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::datamovement::DataMovementStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::datamovement::DataMovementDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::datamovement::DataMovementListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>> AsyncList(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementCreateResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementCreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementStatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementDeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::datamovement::DataMovementListResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::datamovement::DataMovementListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create sends a new data movement request identified by source and destination fields. It returns
    // a response containing a unique identifier which can be used to query the status of the request.
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response);
    // Status requests the status of a previously submitted data movement request. It accepts a unique
    // identifier that identifies the request and returns a status message.
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response);
    // Delete will attempt to delete a completed data movement request. It accepts a unique identifier
    // that identifies the request and returns the status of the delete operation.
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response);
    // List returns all current data movement requests for a given namespace and workflow.
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::datamovement::DataMovementCreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::datamovement::DataMovementCreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::datamovement::DataMovementStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::datamovement::DataMovementStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::datamovement::DataMovementDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::datamovement::DataMovementDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::datamovement::DataMovementListRequest* request, ::grpc::ServerAsyncResponseWriter< ::datamovement::DataMovementListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Status<WithAsyncMethod_Delete<WithAsyncMethod_List<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::datamovement::DataMovementCreateRequest* request, ::datamovement::DataMovementCreateResponse* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Status() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::datamovement::DataMovementStatusRequest* request, ::datamovement::DataMovementStatusResponse* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::MessageAllocator< ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::datamovement::DataMovementDeleteRequest* request, ::datamovement::DataMovementDeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::datamovement::DataMovementListRequest* request, ::datamovement::DataMovementListResponse* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::MessageAllocator< ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Create<WithCallbackMethod_Status<WithCallbackMethod_Delete<WithCallbackMethod_List<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Status() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~WithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::datamovement::DataMovementCreateRequest, ::datamovement::DataMovementCreateResponse>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementCreateRequest* /*request*/, ::datamovement::DataMovementCreateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::datamovement::DataMovementCreateRequest,::datamovement::DataMovementCreateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::datamovement::DataMovementStatusRequest, ::datamovement::DataMovementStatusResponse>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementStatusRequest* /*request*/, ::datamovement::DataMovementStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::datamovement::DataMovementStatusRequest,::datamovement::DataMovementStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::datamovement::DataMovementDeleteRequest, ::datamovement::DataMovementDeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementDeleteRequest* /*request*/, ::datamovement::DataMovementDeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::datamovement::DataMovementDeleteRequest,::datamovement::DataMovementDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::datamovement::DataMovementListRequest, ::datamovement::DataMovementListResponse>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::datamovement::DataMovementListRequest* /*request*/, ::datamovement::DataMovementListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::datamovement::DataMovementListRequest,::datamovement::DataMovementListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_List<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_List<Service > > > > StreamedService;
};

}  // namespace datamovement


#endif  // GRPC_datamovement_2eproto__INCLUDED
